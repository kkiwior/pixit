@page "/game"
@using pixit.Shared.Models
@using pixit.Shared.Models.Others

<div class="col-12 col-md-3 col-xl-2 p-0 primary">
    @if(State.Room.Game.Waiting.Contains(State.UserId))
    {
        <audio src="alert.mp3" autoplay></audio>
    }
    <div class="d-flex flex-column playerlist">
        @foreach (UserModel user in State.Room.Users)
        {
            <div class="players container-fluid p-0">
                <div class="player row p-2 m-0">
                    <div class="avatar p-0 my-auto" align="center"><Avatar IsHost="false" Background="@user.Avatar.Background" Cloth="@user.Avatar.Cloth" Eye="@user.Avatar.Eye" Face="@user.Avatar.Face" Gender="@user.Avatar.Gender" Hair="@user.Avatar.Hair" Mouth="@user.Avatar.Mouth" Size="48"/>
                    @if (State.Room.Game.Waiting.Contains(user.Id))
                    {
                        <div class="waiting">
                            <object type="image/svg+xml" data="images/utils/hourglass.svg" class="hourglass"></object>
                        </div>   
                    }
                    </div>
                    <div class="col pr-0 my-auto">
                        <div class="container-fluid p-0">
                            <div class="row">
                                <div class="name col-10 col-md-11 my-auto">&nbsp;@user.Name</div>
                                <div class="score col-2 col-md-1 p-0 my-auto ml-auto">@(State.Room.Game.Scoreboard.Find(u=>u.UserId == user.Id)?.Score)</div>
                            </div>
                        </div>
                        </div>
                </div>
            </div>
        }
        </div>
</div>
<div class="col-12 col-md-9 col-xl-10 p-0">
    @if (State.Room.Game.State == GameState.UsersPicking || State.Room.Game.State == GameState.UsersVoting)
    {
        <div class="clue-show col-12 text-center">
            @State.Room.Game.Clue
        </div>
    }
    
    @if (State.Room.Game.State == GameState.UsersPicking)
    {
        <div class="container-fluid vh-100 p-0">
            <div class="card-container">
                @for (var i = 0; i < State.Room.Game.CardsOnTableCount; ++i)
                {
                    <div class="cardcover">
                        <img class="rounded-3 shadow" src="images/cardcover.webp" alt=""/>
                    </div>
                }
            </div>
        </div>
    }
    @if (State.Room.Game.State == GameState.UsersVoting)
    {
        <div class="container-fluid vh-100 p-0">
            <div class="card-container usercard-container" data-players="@State.Room.Users.Count">
                @foreach (CardOnTableModel card in State.Room.Game.CardsOnTable)
                {
                    <div class="cardc" @onclick='() => VoteCard(card.Id)'>
                        <img class="rounded-3 shadow" src="images/cards/card@(card.Card.Id).webp" alt=""/>
                    </div>
                }
            </div>
        </div>
    }
    @if (State.Room.Game.State == GameState.NarratorPicking || State.Room.Game.State == GameState.UsersPicking)
    {
        <div class="container-fluid p-0">
            <div class="card-container deck-container">
                @if (State.Room.Game.Narrator.UserId == State.UserId)
                {
                    <div class="clue">
                        <textarea placeholder="@(Localization["Clue"])..." @bind="_clue"></textarea>
                    </div>
                }
                @foreach (CardModel card in State.CardDeck)
                {
                    <div class="cardd" @onclick='() => SendCard(card)'>
                        <img class="rounded-3 shadow" src="images/cards/card@(card.Id).webp" alt=""/>
                    </div>
                }
            </div>
        </div>
    }
</div>